//! > Test expansion of the derive(Introspect).

//! > test_runner_name
test_expand_plugin

//! > cairo_code
use core::serde::Serde;

#[derive(Copy, Drop, Serde, Introspect)]
struct Vec2 {
    x: u32,
    y: u32
}

#[derive(Serde, Copy, Drop, Introspect)]
enum PlainEnum {
    Left: (),
    Right: (),
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumPrimitive {
    Left: (u16,),
    Right: (u16,),
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumTuple {
    Left: (u8, u8),
    Right: (u8, u8),
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumCustom {
    Left: Vec2,
    Right: Vec2,
}

#[derive(Copy, Drop, Introspect)]
struct Position {
    #[key]
    player: ContractAddress,
    before: u8,
    vec: Vec2,
    after: u16,
}

#[derive(Copy, Drop, Serde, Introspect)]
struct GenericStruct<T> {
    t: T,
}

impl Vec2SchemaIntrospection of dojo::database::schema::SchemaIntrospection<Vec2> {
    #[inline(always)]
    fn size() -> usize {
        2
    }

    #[inline(always)]
    fn layout(ref layout: Array<u8>) {
        layout.append(32);
        layout.append(32);
    }

    #[inline(always)]
    fn ty() -> dojo::database::schema::Ty {
        dojo::database::schema::Ty::Struct(
            dojo::database::schema::Struct {
                name: 'Vec2',
                attrs: array![].span(),
                children: array![
                    dojo::database::schema::serialize_member(
                        @dojo::database::schema::Member {
                            name: 'x',
                            ty: dojo::database::schema::Ty::Primitive('u32'),
                            attrs: array![].span()
                        }
                    ),
                    dojo::database::schema::serialize_member(
                        @dojo::database::schema::Member {
                            name: 'y',
                            ty: dojo::database::schema::Ty::Primitive('u32'),
                            attrs: array![].span()
                        }
                    )
                ]
                    .span()
            }
        )
    }
}



#[derive(Serde, Copy, Drop, Introspect)]
enum PlainEnum {
    Left: (),
    Right: (),
}

impl PlainEnumSchemaIntrospection of dojo::database::schema::SchemaIntrospection<PlainEnum> {
    #[inline(always)]
    fn size() -> usize {
        1
    }

    #[inline(always)]
    fn layout(ref layout: Array<u8>) {
        layout.append(8);
    }

    #[inline(always)]
    fn ty() -> dojo::database::schema::Ty {
        dojo::database::schema::Ty::Enum(
            dojo::database::schema::Enum {
                name: 'Direction',
                attrs: array![].span(),
                children: array![
                    (
                        'Left',
                        dojo::database::schema::serialize_member_type(
                            @dojo::database::schema::Ty::Tuple(array![].span())
                        )
                    ),
                    (
                        'Right',
                        dojo::database::schema::serialize_member_type(
                            @dojo::database::schema::Ty::Tuple(array![].span())
                        )
                    )
                ]
                    .span()
            }
        )
    }
}



#[derive(Serde, Copy, Drop, Introspect)]
enum EnumPrimitive {
    Left: (u16,),
    Right: (u16,),
}

impl EnumPrimitiveSchemaIntrospection of dojo::database::schema::SchemaIntrospection<EnumPrimitive> {
    #[inline(always)]
    fn size() -> usize {
        2
    }

    #[inline(always)]
    fn layout(ref layout: Array<u8>) {
        layout.append(8);
        layout.append(16);
    }

    #[inline(always)]
    fn ty() -> dojo::database::schema::Ty {
        dojo::database::schema::Ty::Enum(
            dojo::database::schema::Enum {
                name: 'Direction',
                attrs: array![].span(),
                children: array![
                    (
                        'Left',
                        dojo::database::schema::serialize_member_type(
                            @dojo::database::schema::Ty::Tuple(
                                array![
                                    dojo::database::schema::serialize_member_type(
                                        @dojo::database::schema::Ty::Primitive('u16')
                                    )
                                ]
                                    .span()
                            )
                        )
                    ),
                    (
                        'Right',
                        dojo::database::schema::serialize_member_type(
                            @dojo::database::schema::Ty::Tuple(
                                array![
                                    dojo::database::schema::serialize_member_type(
                                        @dojo::database::schema::Ty::Primitive('u16')
                                    )
                                ]
                                    .span()
                            )
                        )
                    )
                ]
                    .span()
            }
        )
    }
}



#[derive(Serde, Copy, Drop, Introspect)]
enum EnumTuple {
    Left: (u8, u8),
    Right: (u8, u8),
}

impl EnumTupleSchemaIntrospection of dojo::database::schema::SchemaIntrospection<EnumTuple> {
    #[inline(always)]
    fn size() -> usize {
        3
    }

    #[inline(always)]
    fn layout(ref layout: Array<u8>) {
        layout.append(8);
        layout.append(8);
        layout.append(8);
    }

    #[inline(always)]
    fn ty() -> dojo::database::schema::Ty {
        dojo::database::schema::Ty::Enum(
            dojo::database::schema::Enum {
                name: 'Direction',
                attrs: array![].span(),
                children: array![
                    (
                        'Left',
                        dojo::database::schema::serialize_member_type(
                            @dojo::database::schema::Ty::Tuple(
                                array![
                                    dojo::database::schema::serialize_member_type(
                                        @dojo::database::schema::Ty::Primitive('u8')
                                    ),
                                    dojo::database::schema::serialize_member_type(
                                        @dojo::database::schema::Ty::Primitive('u8')
                                    )
                                ]
                                    .span()
                            )
                        )
                    ),
                    (
                        'Right',
                        dojo::database::schema::serialize_member_type(
                            @dojo::database::schema::Ty::Tuple(
                                array![
                                    dojo::database::schema::serialize_member_type(
                                        @dojo::database::schema::Ty::Primitive('u8')
                                    ),
                                    dojo::database::schema::serialize_member_type(
                                        @dojo::database::schema::Ty::Primitive('u8')
                                    )
                                ]
                                    .span()
                            )
                        )
                    )
                ]
                    .span()
            }
        )
    }
}



#[derive(Serde, Copy, Drop, Introspect)]
enum EnumCustom {
    Left: Vec2,
    Right: Vec2,
}

impl EnumCustomSchemaIntrospection of dojo::database::schema::SchemaIntrospection<EnumCustom> {
    #[inline(always)]
    fn size() -> usize {
        dojo::database::schema::SchemaIntrospection::<Vec2>::size() + 1
    }

    #[inline(always)]
    fn layout(ref layout: Array<u8>) {
        layout.append(8);
        dojo::database::schema::SchemaIntrospection::<Vec2>::layout(ref layout);
    }

    #[inline(always)]
    fn ty() -> dojo::database::schema::Ty {
        dojo::database::schema::Ty::Enum(
            dojo::database::schema::Enum {
                name: 'Direction',
                attrs: array![].span(),
                children: array![
                    (
                        'Left',
                        dojo::database::schema::serialize_member_type(
                            @dojo::database::schema::Ty::Tuple(
                                array![
                                    dojo::database::schema::serialize_member_type(
                                        @dojo::database::schema::SchemaIntrospection::<Vec2>::ty()
                                    )
                                ]
                                    .span()
                            )
                        )
                    ),
                    (
                        'Right',
                        dojo::database::schema::serialize_member_type(
                            @dojo::database::schema::Ty::Tuple(
                                array![
                                    dojo::database::schema::serialize_member_type(
                                        @dojo::database::schema::SchemaIntrospection::<Vec2>::ty()
                                    )
                                ]
                                    .span()
                            )
                        )
                    )
                ]
                    .span()
            }
        )
    }
}



#[derive(Model, Copy, Drop, Introspect)]
struct Position {
    #[key]
    player: ContractAddress,
    before: u8,
    vec: Vec2,
    after: u16,
}
impl PositionModel of dojo::model::Model<Position> {
    #[inline(always)]
    fn name(self: @Position) -> felt252 {
        'Position'
    }

    #[inline(always)]
    fn keys(self: @Position) -> Span<felt252> {
        let mut serialized = ArrayTrait::new();
        serde::Serde::serialize(self.player, ref serialized);
        array::ArrayTrait::span(@serialized)
    }

    #[inline(always)]
    fn values(self: @Position) -> Span<felt252> {
        let mut serialized = ArrayTrait::new();
        serde::Serde::serialize(self.before, ref serialized);
        serde::Serde::serialize(self.vec, ref serialized);
        serde::Serde::serialize(self.after, ref serialized);
        array::ArrayTrait::span(@serialized)
    }

    #[inline(always)]
    fn layout(self: @Position) -> Span<u8> {
        let mut layout = ArrayTrait::new();
        dojo::database::schema::SchemaIntrospection::<Position>::layout(ref layout);
        array::ArrayTrait::span(@layout)
    }

    #[inline(always)]
    fn packed_size(self: @Position) -> usize {
        let mut layout = self.layout();
        dojo::packing::calculate_packed_size(ref layout)
    }
}


impl PositionSchemaIntrospection of dojo::database::schema::SchemaIntrospection<Position> {
    #[inline(always)]
    fn size() -> usize {
        dojo::database::schema::SchemaIntrospection::<Vec2>::size() + 2
    }

    #[inline(always)]
    fn layout(ref layout: Array<u8>) {
        layout.append(8);
        dojo::database::schema::SchemaIntrospection::<Vec2>::layout(ref layout);
        layout.append(16);
    }

    #[inline(always)]
    fn ty() -> dojo::database::schema::Ty {
        dojo::database::schema::Ty::Struct(
            dojo::database::schema::Struct {
                name: 'Position',
                attrs: array![].span(),
                children: array![
                    dojo::database::schema::serialize_member(
                        @dojo::database::schema::Member {
                            name: 'player',
                            ty: dojo::database::schema::Ty::Primitive('ContractAddress'),
                            attrs: array!['key'].span()
                        }
                    ),
                    dojo::database::schema::serialize_member(
                        @dojo::database::schema::Member {
                            name: 'before',
                            ty: dojo::database::schema::Ty::Primitive('u8'),
                            attrs: array![].span()
                        }
                    ),
                    dojo::database::schema::serialize_member(
                        @dojo::database::schema::Member {
                            name: 'vec',
                            ty: dojo::database::schema::SchemaIntrospection::<Vec2>::ty(),
                            attrs: array![].span()
                        }
                    ),
                    dojo::database::schema::serialize_member(
                        @dojo::database::schema::Member {
                            name: 'after',
                            ty: dojo::database::schema::Ty::Primitive('u16'),
                            attrs: array![].span()
                        }
                    )
                ]
                    .span()
            }
        )
    }
}


#[starknet::interface]
trait IPosition<T> {
    fn name(self: @T) -> felt252;
}

#[starknet::contract]
mod position {
    use super::Position;

    #[storage]
    struct Storage {}

    #[external(v0)]
    fn name(self: @ContractState) -> felt252 {
        'Position'
    }

    #[external(v0)]
    fn unpacked_size(self: @ContractState) -> usize {
        dojo::database::schema::SchemaIntrospection::<Position>::size()
    }

    #[external(v0)]
    fn packed_size(self: @ContractState) -> usize {
        let mut layout = ArrayTrait::new();
        dojo::database::schema::SchemaIntrospection::<Position>::layout(ref layout);
        let mut layout_span = layout.span();
        dojo::packing::calculate_packed_size(ref layout_span)
    }

    #[external(v0)]
    fn layout(self: @ContractState) -> Span<u8> {
        let mut layout = ArrayTrait::new();
        dojo::database::schema::SchemaIntrospection::<Position>::layout(ref layout);
        array::ArrayTrait::span(@layout)
    }

    #[external(v0)]
    fn schema(self: @ContractState) -> dojo::database::schema::Ty {
        dojo::database::schema::SchemaIntrospection::<Position>::ty()
    }
}

impl PositionSchemaIntrospection of dojo::database::schema::SchemaIntrospection<Position> {
    #[inline(always)]
    fn size() -> usize {
        dojo::database::schema::SchemaIntrospection::<Vec2>::size() + 2
    }

    #[inline(always)]
    fn layout(ref layout: Array<u8>) {
        layout.append(8);
        dojo::database::schema::SchemaIntrospection::<Vec2>::layout(ref layout);
        layout.append(16);
    }

    #[inline(always)]
    fn ty() -> dojo::database::schema::Ty {
        dojo::database::schema::Ty::Struct(
            dojo::database::schema::Struct {
                name: 'Position',
                attrs: array![].span(),
                children: array![
                    dojo::database::schema::serialize_member(
                        @dojo::database::schema::Member {
                            name: 'player',
                            ty: dojo::database::schema::Ty::Primitive('ContractAddress'),
                            attrs: array!['key'].span()
                        }
                    ),
                    dojo::database::schema::serialize_member(
                        @dojo::database::schema::Member {
                            name: 'before',
                            ty: dojo::database::schema::Ty::Primitive('u8'),
                            attrs: array![].span()
                        }
                    ),
                    dojo::database::schema::serialize_member(
                        @dojo::database::schema::Member {
                            name: 'vec',
                            ty: dojo::database::schema::SchemaIntrospection::<Vec2>::ty(),
                            attrs: array![].span()
                        }
                    ),
                    dojo::database::schema::serialize_member(
                        @dojo::database::schema::Member {
                            name: 'after',
                            ty: dojo::database::schema::Ty::Primitive('u16'),
                            attrs: array![].span()
                        }
                    )
                ]
                    .span()
            }
        )
    }
}

//! > expected_diagnostics
error: Unsupported attribute.
 --> test_src/lib.cairo[Position]:96:13
            #[starknet::contract]
            ^*******************^

error: Unsupported attribute.
 --> test_src/lib.cairo[Position]:100:17
                #[storage]
                ^********^

error: Unsupported attribute.
 --> test_src/lib.cairo[Position]:103:17
                #[external(v0)]
                ^*************^

error: Unsupported attribute.
 --> test_src/lib.cairo[Position]:108:17
                #[external(v0)]
                ^*************^

error: Unsupported attribute.
 --> test_src/lib.cairo[Position]:113:17
                #[external(v0)]
                ^*************^

error: Unsupported attribute.
 --> test_src/lib.cairo[Position]:121:17
                #[external(v0)]
                ^*************^

error: Unsupported attribute.
 --> test_src/lib.cairo[Position]:128:17
                #[external(v0)]
                ^*************^

//! > expanded_cairo_code
use core::serde::Serde;

#[derive(Copy, Drop, Serde, Introspect)]
struct Vec2 {
    x: u32,
    y: u32
}

#[derive(Serde, Copy, Drop, Introspect)]
enum PlainEnum {
    Left: (),
    Right: (),
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumPrimitive {
    Left: (u16,),
    Right: (u16,),
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumTuple {
    Left: (u8, u8),
    Right: (u8, u8),
}

#[derive(Serde, Copy, Drop, Introspect)]
enum EnumCustom {
    Left: Vec2,
    Right: Vec2,
}

#[derive(Copy, Drop, Introspect)]
struct Position {
    #[key]
    player: ContractAddress,
    before: u8,
    vec: Vec2,
    after: u16,
}

#[derive(Copy, Drop, Serde, Introspect)]
struct GenericStruct<T> {
    t: T,
}
impl Vec2Copy of core::traits::Copy::<Vec2>;
impl Vec2Drop of core::traits::Drop::<Vec2>;
impl Vec2Serde of core::serde::Serde::<Vec2> {
    fn serialize(self: @Vec2, ref output: core::array::Array<felt252>) {
        core::serde::Serde::serialize(self.x, ref output);
        core::serde::Serde::serialize(self.y, ref output)
    }
    fn deserialize(ref serialized: core::array::Span<felt252>) -> core::option::Option<Vec2> {
        core::option::Option::Some(Vec2 {
            x: core::serde::Serde::deserialize(ref serialized)?,
            y: core::serde::Serde::deserialize(ref serialized)?,
        })
    }
}

impl Vec2Introspect<> of dojo::database::introspect::Introspect<Vec2<>> {
    #[inline(always)]
    fn size() -> usize {
        2
    }

    #[inline(always)]
    fn layout(ref layout: Array<u8>) {
        layout.append(32);
layout.append(32);

    }

    #[inline(always)]
    fn ty() -> dojo::database::introspect::Ty {
        dojo::database::introspect::Ty::Struct(dojo::database::introspect::Struct {
            name: 'Vec2',
            attrs: array![].span(),
            children: array![dojo::database::introspect::serialize_member(@dojo::database::introspect::Member {
                name: 'x',
                ty: dojo::database::introspect::Ty::Primitive('u32'),
                attrs: array![].span()
            }), dojo::database::introspect::serialize_member(@dojo::database::introspect::Member {
                name: 'y',
                ty: dojo::database::introspect::Ty::Primitive('u32'),
                attrs: array![].span()
            })].span()
        })
    }
}
impl PlainEnumSerde of core::serde::Serde::<PlainEnum> {
    fn serialize(self: @PlainEnum, ref output: core::array::Array<felt252>) {
        match self {
            PlainEnum::Left(x) => { core::serde::Serde::serialize(@0, ref output); core::serde::Serde::serialize(x, ref output); },
            PlainEnum::Right(x) => { core::serde::Serde::serialize(@1, ref output); core::serde::Serde::serialize(x, ref output); },
        }
    }
    fn deserialize(ref serialized: core::array::Span<felt252>) -> core::option::Option<PlainEnum> {
        let idx: felt252 = core::serde::Serde::deserialize(ref serialized)?;
        core::option::Option::Some(
            if idx == 0 { PlainEnum::Left(core::serde::Serde::deserialize(ref serialized)?) }
            else if idx == 1 { PlainEnum::Right(core::serde::Serde::deserialize(ref serialized)?) }
            else { return core::option::Option::None; }
        )
    }
}
impl PlainEnumCopy of core::traits::Copy::<PlainEnum>;
impl PlainEnumDrop of core::traits::Drop::<PlainEnum>;

impl PlainEnumIntrospect<> of dojo::database::introspect::Introspect<PlainEnum<>> {
    #[inline(always)]
    fn size() -> usize {
        1
    }

    #[inline(always)]
    fn layout(ref layout: Array<u8>) {
        layout.append(8);

    }

    #[inline(always)]
    fn ty() -> dojo::database::introspect::Ty {
        dojo::database::introspect::Ty::Enum(
            dojo::database::introspect::Enum {
                name: 'PlainEnum',
                attrs: array![].span(),
                children: array![(
                    'Left',
                    dojo::database::introspect::serialize_member_type(
                    @dojo::database::introspect::Ty::Tuple(array![].span()))
                ),
(
                    'Right',
                    dojo::database::introspect::serialize_member_type(
                    @dojo::database::introspect::Ty::Tuple(array![].span()))
                )].span()
            }
        )
    }
}
impl EnumPrimitiveSerde of core::serde::Serde::<EnumPrimitive> {
    fn serialize(self: @EnumPrimitive, ref output: core::array::Array<felt252>) {
        match self {
            EnumPrimitive::Left(x) => { core::serde::Serde::serialize(@0, ref output); core::serde::Serde::serialize(x, ref output); },
            EnumPrimitive::Right(x) => { core::serde::Serde::serialize(@1, ref output); core::serde::Serde::serialize(x, ref output); },
        }
    }
    fn deserialize(ref serialized: core::array::Span<felt252>) -> core::option::Option<EnumPrimitive> {
        let idx: felt252 = core::serde::Serde::deserialize(ref serialized)?;
        core::option::Option::Some(
            if idx == 0 { EnumPrimitive::Left(core::serde::Serde::deserialize(ref serialized)?) }
            else if idx == 1 { EnumPrimitive::Right(core::serde::Serde::deserialize(ref serialized)?) }
            else { return core::option::Option::None; }
        )
    }
}
impl EnumPrimitiveCopy of core::traits::Copy::<EnumPrimitive>;
impl EnumPrimitiveDrop of core::traits::Drop::<EnumPrimitive>;

impl EnumPrimitiveIntrospect<> of dojo::database::introspect::Introspect<EnumPrimitive<>> {
    #[inline(always)]
    fn size() -> usize {
        2
    }

    #[inline(always)]
    fn layout(ref layout: Array<u8>) {
        layout.append(8);
layout.append(16);

    }

    #[inline(always)]
    fn ty() -> dojo::database::introspect::Ty {
        dojo::database::introspect::Ty::Enum(
            dojo::database::introspect::Enum {
                name: 'EnumPrimitive',
                attrs: array![].span(),
                children: array![(
                    'Left',
                    dojo::database::introspect::serialize_member_type(
                    @dojo::database::introspect::Ty::Tuple(array![dojo::database::introspect::serialize_member_type(
                            @dojo::database::introspect::Ty::Primitive('u16')
                        )].span()))
                ),
(
                    'Right',
                    dojo::database::introspect::serialize_member_type(
                    @dojo::database::introspect::Ty::Tuple(array![dojo::database::introspect::serialize_member_type(
                            @dojo::database::introspect::Ty::Primitive('u16')
                        )].span()))
                )].span()
            }
        )
    }
}
impl EnumTupleSerde of core::serde::Serde::<EnumTuple> {
    fn serialize(self: @EnumTuple, ref output: core::array::Array<felt252>) {
        match self {
            EnumTuple::Left(x) => { core::serde::Serde::serialize(@0, ref output); core::serde::Serde::serialize(x, ref output); },
            EnumTuple::Right(x) => { core::serde::Serde::serialize(@1, ref output); core::serde::Serde::serialize(x, ref output); },
        }
    }
    fn deserialize(ref serialized: core::array::Span<felt252>) -> core::option::Option<EnumTuple> {
        let idx: felt252 = core::serde::Serde::deserialize(ref serialized)?;
        core::option::Option::Some(
            if idx == 0 { EnumTuple::Left(core::serde::Serde::deserialize(ref serialized)?) }
            else if idx == 1 { EnumTuple::Right(core::serde::Serde::deserialize(ref serialized)?) }
            else { return core::option::Option::None; }
        )
    }
}
impl EnumTupleCopy of core::traits::Copy::<EnumTuple>;
impl EnumTupleDrop of core::traits::Drop::<EnumTuple>;

impl EnumTupleIntrospect<> of dojo::database::introspect::Introspect<EnumTuple<>> {
    #[inline(always)]
    fn size() -> usize {
        3
    }

    #[inline(always)]
    fn layout(ref layout: Array<u8>) {
        layout.append(8);
layout.append(8);
layout.append(8);

    }

    #[inline(always)]
    fn ty() -> dojo::database::introspect::Ty {
        dojo::database::introspect::Ty::Enum(
            dojo::database::introspect::Enum {
                name: 'EnumTuple',
                attrs: array![].span(),
                children: array![(
                    'Left',
                    dojo::database::introspect::serialize_member_type(
                    @dojo::database::introspect::Ty::Tuple(array![dojo::database::introspect::serialize_member_type(
                            @dojo::database::introspect::Ty::Primitive('u8')
                        ), dojo::database::introspect::serialize_member_type(
                            @dojo::database::introspect::Ty::Primitive('u8')
                        )].span()))
                ),
(
                    'Right',
                    dojo::database::introspect::serialize_member_type(
                    @dojo::database::introspect::Ty::Tuple(array![dojo::database::introspect::serialize_member_type(
                            @dojo::database::introspect::Ty::Primitive('u8')
                        ), dojo::database::introspect::serialize_member_type(
                            @dojo::database::introspect::Ty::Primitive('u8')
                        )].span()))
                )].span()
            }
        )
    }
}
impl EnumCustomSerde of core::serde::Serde::<EnumCustom> {
    fn serialize(self: @EnumCustom, ref output: core::array::Array<felt252>) {
        match self {
            EnumCustom::Left(x) => { core::serde::Serde::serialize(@0, ref output); core::serde::Serde::serialize(x, ref output); },
            EnumCustom::Right(x) => { core::serde::Serde::serialize(@1, ref output); core::serde::Serde::serialize(x, ref output); },
        }
    }
    fn deserialize(ref serialized: core::array::Span<felt252>) -> core::option::Option<EnumCustom> {
        let idx: felt252 = core::serde::Serde::deserialize(ref serialized)?;
        core::option::Option::Some(
            if idx == 0 { EnumCustom::Left(core::serde::Serde::deserialize(ref serialized)?) }
            else if idx == 1 { EnumCustom::Right(core::serde::Serde::deserialize(ref serialized)?) }
            else { return core::option::Option::None; }
        )
    }
}
impl EnumCustomCopy of core::traits::Copy::<EnumCustom>;
impl EnumCustomDrop of core::traits::Drop::<EnumCustom>;

impl EnumCustomIntrospect<> of dojo::database::introspect::Introspect<EnumCustom<>> {
    #[inline(always)]
    fn size() -> usize {
        dojo::database::introspect::Introspect::<Vec2>::size() + 1
    }

    #[inline(always)]
    fn layout(ref layout: Array<u8>) {
        layout.append(8);
dojo::database::introspect::Introspect::<Vec2>::layout(ref layout);

    }

    #[inline(always)]
    fn ty() -> dojo::database::introspect::Ty {
        dojo::database::introspect::Ty::Enum(
            dojo::database::introspect::Enum {
                name: 'EnumCustom',
                attrs: array![].span(),
                children: array![(
                    'Left',
                    dojo::database::introspect::serialize_member_type(
                    @dojo::database::introspect::Ty::Tuple(array![dojo::database::introspect::serialize_member_type(
                        @dojo::database::introspect::Introspect::<Vec2>::ty()
                    )].span()))
                ),
(
                    'Right',
                    dojo::database::introspect::serialize_member_type(
                    @dojo::database::introspect::Ty::Tuple(array![dojo::database::introspect::serialize_member_type(
                        @dojo::database::introspect::Introspect::<Vec2>::ty()
                    )].span()))
                )].span()
            }
        )
    }
}
impl PositionCopy of core::traits::Copy::<Position>;
impl PositionDrop of core::traits::Drop::<Position>;

impl PositionIntrospect<> of dojo::database::introspect::Introspect<Position<>> {
    #[inline(always)]
    fn size() -> usize {
        dojo::database::introspect::Introspect::<Vec2>::size() + 2
    }

    #[inline(always)]
    fn layout(ref layout: Array<u8>) {
        layout.append(8);
dojo::database::introspect::Introspect::<Vec2>::layout(ref layout);
layout.append(16);

    }

    #[inline(always)]
    fn ty() -> dojo::database::introspect::Ty {
        dojo::database::introspect::Ty::Struct(dojo::database::introspect::Struct {
            name: 'Position',
            attrs: array![].span(),
            children: array![dojo::database::introspect::serialize_member(@dojo::database::introspect::Member {
                name: 'player',
                ty: dojo::database::introspect::Ty::Primitive('ContractAddress'),
                attrs: array!['key'].span()
            }), dojo::database::introspect::serialize_member(@dojo::database::introspect::Member {
                name: 'before',
                ty: dojo::database::introspect::Ty::Primitive('u8'),
                attrs: array![].span()
            }), dojo::database::introspect::serialize_member(@dojo::database::introspect::Member {
                name: 'vec',
                ty: dojo::database::introspect::Introspect::<Vec2>::ty(),
                attrs: array![].span()
            }), dojo::database::introspect::serialize_member(@dojo::database::introspect::Member {
                name: 'after',
                ty: dojo::database::introspect::Ty::Primitive('u16'),
                attrs: array![].span()
            })].span()
        })
    }
}
impl GenericStructCopy<T, +core::traits::Copy<T>> of core::traits::Copy::<GenericStruct<T>>;
impl GenericStructDrop<T, +core::traits::Drop<T>> of core::traits::Drop::<GenericStruct<T>>;
impl GenericStructSerde<T, +core::serde::Serde<T>, +core::traits::Destruct<T>> of core::serde::Serde::<GenericStruct<T>> {
    fn serialize(self: @GenericStruct<T>, ref output: core::array::Array<felt252>) {
        core::serde::Serde::serialize(self.t, ref output)
    }
    fn deserialize(ref serialized: core::array::Span<felt252>) -> core::option::Option<GenericStruct<T>> {
        core::option::Option::Some(GenericStruct {
            t: core::serde::Serde::deserialize(ref serialized)?,
        })
    }
}

impl GenericStructIntrospect<T, impl TIntrospect: dojo::database::introspect::Introspect<T>> of dojo::database::introspect::Introspect<GenericStruct<T>> {
    #[inline(always)]
    fn size() -> usize {
        dojo::database::introspect::Introspect::<T>::size()
    }

    #[inline(always)]
    fn layout(ref layout: Array<u8>) {
        dojo::database::introspect::Introspect::<T>::layout(ref layout);

    }

    #[inline(always)]
    fn ty() -> dojo::database::introspect::Ty {
        dojo::database::introspect::Ty::Struct(dojo::database::introspect::Struct {
            name: 'GenericStruct',
            attrs: array![].span(),
            children: array![dojo::database::introspect::serialize_member(@dojo::database::introspect::Member {
                name: 't',
                ty: dojo::database::introspect::Introspect::<T>::ty(),
                attrs: array![].span()
            })].span()
        })
    }
}

//! > expected_diagnostics
